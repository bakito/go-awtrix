// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

// Code generated from client/types/app.go.

package types

//go:generate go run github.com/kilianpaquier/go-builder-generator/cmd/go-builder-generator@latest generate -d . -f app.go -s App

// AppBuilder represents App's builder.
type AppBuilder struct {
	build App
}

// NewAppBuilder creates a new AppBuilder.
func NewAppBuilder() *AppBuilder {
	return &AppBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *AppBuilder) Copy() *AppBuilder {
	return &AppBuilder{b.build}
}

// Build returns built App.
func (b *AppBuilder) Build() *App {
	result := b.build
	return &result
}

// Autoscale sets App's Autoscale.
func (b *AppBuilder) Autoscale(autoscale bool) *AppBuilder {
	b.build.Autoscale = &autoscale
	return b
}

// Background sets App's Background.
func (b *AppBuilder) Background(background string) *AppBuilder {
	b.build.Background = &background
	return b
}

// Bar sets App's Bar.
func (b *AppBuilder) Bar(bar []int) *AppBuilder {
	b.build.Bar = bar
	return b
}

// BlinkText sets App's BlinkText.
func (b *AppBuilder) BlinkText(blinkText int) *AppBuilder {
	b.build.BlinkText = &blinkText
	return b
}

// Center sets App's Center.
func (b *AppBuilder) Center(center bool) *AppBuilder {
	b.build.Center = &center
	return b
}

// Clients sets App's Clients.
func (b *AppBuilder) Clients(clients []string) *AppBuilder {
	b.build.Clients = clients
	return b
}

// Color sets App's Color.
func (b *AppBuilder) Color(color string) *AppBuilder {
	b.build.Color = &color
	return b
}

// Draw sets App's Draw.
func (b *AppBuilder) Draw(draw map[string][]Drawable) *AppBuilder {
	b.build.Draw = draw
	return b
}

// Duration sets App's Duration.
func (b *AppBuilder) Duration(duration int) *AppBuilder {
	b.build.Duration = &duration
	return b
}

// Effect sets App's Effect.
func (b *AppBuilder) Effect(effect string) *AppBuilder {
	b.build.Effect = &effect
	return b
}

// EffectSettings sets App's EffectSettings.
func (b *AppBuilder) EffectSettings(effectSettings map[string]string) *AppBuilder {
	b.build.EffectSettings = effectSettings
	return b
}

// FadeText sets App's FadeText.
func (b *AppBuilder) FadeText(fadeText int) *AppBuilder {
	b.build.FadeText = &fadeText
	return b
}

// Gradient sets App's Gradient.
func (b *AppBuilder) Gradient(gradient []string) *AppBuilder {
	b.build.Gradient = gradient
	return b
}

// Hold sets App's Hold.
func (b *AppBuilder) Hold(hold bool) *AppBuilder {
	b.build.Hold = &hold
	return b
}

// Icon sets App's Icon.
func (b *AppBuilder) Icon(icon int) *AppBuilder {
	b.build.Icon = &icon
	return b
}

// Lifetime sets App's Lifetime.
func (b *AppBuilder) Lifetime(lifetime int) *AppBuilder {
	b.build.Lifetime = &lifetime
	return b
}

// LifetimeMode sets App's LifetimeMode.
func (b *AppBuilder) LifetimeMode(lifetimeMode LifetimeMode) *AppBuilder {
	b.build.LifetimeMode = &lifetimeMode
	return b
}

// Line sets App's Line.
func (b *AppBuilder) Line(line []int) *AppBuilder {
	b.build.Line = line
	return b
}

// LoopSound sets App's LoopSound.
func (b *AppBuilder) LoopSound(loopSound bool) *AppBuilder {
	b.build.LoopSound = &loopSound
	return b
}

// NoScroll sets App's NoScroll.
func (b *AppBuilder) NoScroll(noScroll bool) *AppBuilder {
	b.build.NoScroll = &noScroll
	return b
}

// Overlay sets App's Overlay.
func (b *AppBuilder) Overlay(overlay string) *AppBuilder {
	b.build.Overlay = &overlay
	return b
}

// Pos sets App's Pos.
func (b *AppBuilder) Pos(pos int) *AppBuilder {
	b.build.Pos = &pos
	return b
}

// Progress sets App's Progress.
func (b *AppBuilder) Progress(progress int) *AppBuilder {
	b.build.Progress = &progress
	return b
}

// ProgressBC sets App's ProgressBC.
func (b *AppBuilder) ProgressBC(progressBC string) *AppBuilder {
	b.build.ProgressBC = &progressBC
	return b
}

// ProgressC sets App's ProgressC.
func (b *AppBuilder) ProgressC(progressC string) *AppBuilder {
	b.build.ProgressC = &progressC
	return b
}

// PushIcon sets App's PushIcon.
func (b *AppBuilder) PushIcon(pushIcon PushIcon) *AppBuilder {
	b.build.PushIcon = &pushIcon
	return b
}

// Rainbow sets App's Rainbow.
func (b *AppBuilder) Rainbow(rainbow bool) *AppBuilder {
	b.build.Rainbow = &rainbow
	return b
}

// Repeat sets App's Repeat.
func (b *AppBuilder) Repeat(repeat int) *AppBuilder {
	b.build.Repeat = &repeat
	return b
}

// Rtttl sets App's Rtttl.
func (b *AppBuilder) Rtttl(rtttl string) *AppBuilder {
	b.build.Rtttl = &rtttl
	return b
}

// Save sets App's Save.
func (b *AppBuilder) Save(save bool) *AppBuilder {
	b.build.Save = &save
	return b
}

// ScrollSpeed sets App's ScrollSpeed.
func (b *AppBuilder) ScrollSpeed(scrollSpeed int) *AppBuilder {
	b.build.ScrollSpeed = &scrollSpeed
	return b
}

// Sound sets App's Sound.
func (b *AppBuilder) Sound(sound string) *AppBuilder {
	b.build.Sound = &sound
	return b
}

// Stack sets App's Stack.
func (b *AppBuilder) Stack(stack bool) *AppBuilder {
	b.build.Stack = &stack
	return b
}

// Text sets App's Text.
func (b *AppBuilder) Text(text string) *AppBuilder {
	b.build.Text = &text
	return b
}

// TextCase sets App's TextCase.
func (b *AppBuilder) TextCase(textCase TextCase) *AppBuilder {
	b.build.TextCase = &textCase
	return b
}

// TextOffset sets App's TextOffset.
func (b *AppBuilder) TextOffset(textOffset int) *AppBuilder {
	b.build.TextOffset = &textOffset
	return b
}

// TopText sets App's TopText.
func (b *AppBuilder) TopText(topText bool) *AppBuilder {
	b.build.TopText = &topText
	return b
}

// Wakeup sets App's Wakeup.
func (b *AppBuilder) Wakeup(wakeup bool) *AppBuilder {
	b.build.Wakeup = &wakeup
	return b
}
